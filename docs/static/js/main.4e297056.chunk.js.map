{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["estado","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","placeholder","onChange","target","value","propType","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGIA,EAAS,EACAC,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG1B,EAAoCC,mBAAS,eAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KA0BA,OACI,mCACI,sBAAMC,SAtBO,SAACC,GAClBA,EAAEC,iBACFR,GAAQ,EAELI,EAAWK,OAAOC,OAAS,GAAKV,EAAO,GACtCE,GAAe,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAEdL,EAAS,EACTE,GAAe,SAAAS,GAAC,MAAI,CAACP,MACrBC,EAAc,MAYd,SACI,uBAAOO,KAAK,OACZC,YAAeT,EACfU,SA7Bc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOC,eAmC/Bf,EAAYgB,SAAW,CACnBf,cAAegB,IAAUC,KAAKC,Y,mCC7CrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCFCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECJwB,SAAEA,GAE1B,MAA0BnB,mBAAS,CAC/B0B,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAY,WAERxB,EAASC,GACJwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI3B,CAACpB,IAEIqB,EDhByBK,CAAa1B,GAAhCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,mCAAMpB,EAAN,OACCoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAACC,GAAD,OACJ,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEfzBgB,EAAe,WAGxB,MAAoC9C,mBAAS,CAAC,sBAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACI,qCACI,6CACA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,oBAAIoC,UAAU,aAAd,SAEQY,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAYA,GADNA,Y,MCZlC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4e297056.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nvar estado = 0;\r\nexport const AddCategory = ( {setCategories} ) => {\r\n    \r\n    //estado\r\n    const [inputValue, setInputValue] = useState('Buscar Gifs')\r\n    //const para recibir info del teclado\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        estado+=1;\r\n\r\n        if(inputValue.trim().length > 2 && estado<5){\r\n            setCategories( c => [inputValue, ...c]);\r\n            setInputValue('');\r\n        }else{\r\n            estado = 0;\r\n            setCategories( c => [inputValue]);\r\n            setInputValue('');\r\n        }\r\n\r\n        /* if( inputValue.trim().length > 2){\r\n            setCategories( c => [inputValue, ...c]);\r\n            setInputValue('');\r\n        } */\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <input type=\"text\" \r\n                placeholder = {inputValue} \r\n                onChange={handleInputChange} \r\n                />\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n//pide una funcion con los poptypes\r\nAddCategory.propType = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","//http\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=TTOrYTa4LXLWJsjsmgbkGtFwnrxelL3D`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title} />\r\n            <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n\r\n    const { data:images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3> {category} </h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando</p> }\r\n            \r\n            <div className=\"card-grid\">\r\n            \r\n                {\r\n                    images.map( (img) =>(\r\n                            <GifGridItem\r\n                            key= {img.id}\r\n                            { ...img }\r\n                            />    \r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect} from 'react';\r\nimport { getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(  () =>{\r\n\r\n        getGifs( category )\r\n            .then(imgs =>{\r\n                \r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n            })\r\n    },[category])\r\n\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch', 'Samurai X', 'League of legends'];\r\n    const [categories, setCategories] = useState(['League of legends']);\r\n\r\n    return (\r\n        <>\r\n            <h2>App de Gifs</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n        \r\n            <ul className=\"contenedor\">\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid\r\n                            key={ category }\r\n                            category = {category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ul>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n/* import App from './App'; */\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}